name: Deploy CDK Stacks

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  setup:
    name: "Setup & Build"
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.cache/pip
        key: deps-${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          deps-${{ runner.os }}-node${{ env.NODE_VERSION }}-
    
    - name: Install Node.js dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: npm ci
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install boto3 coverage pytest
    
    - name: Upload source code
      uses: actions/upload-artifact@v4
      with:
        name: source-code-${{ github.run_id }}
        path: |
          .
          !node_modules/.cache
          !.git
          !*.log
          !.DS_Store
        retention-days: 1

  tests:
    name: "Run Tests"
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: Download source code
      uses: actions/download-artifact@v4
      with:
        name: source-code-${{ github.run_id }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Restore dependencies
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.cache/pip
        key: deps-${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          deps-${{ runner.os }}-node${{ env.NODE_VERSION }}-
    
    - name: Install dependencies (if cache miss)
      run: |
        npm ci
        python -m pip install boto3 coverage pytest
    
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    
    - name: Run Python tests with coverage
      run: |
        echo "🧪 Running Python tests..."
        python3 -m unittest discover -s ./test -p "test_*.py" -v
        coverage run -m unittest discover -s ./test -p "test_*.py"
        coverage report -m
        coverage xml
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ github.run_id }}
        path: |
          coverage.xml
          .coverage
        retention-days: 7

  plan:
    name: "Plan Changes"
    runs-on: ubuntu-latest
    needs: tests
    
    permissions:
      id-token: write
      contents: read
      pull-requests: write  # For PR comments
    
    steps:
    - name: Download source code
      uses: actions/download-artifact@v4
      with:
        name: source-code-${{ github.run_id }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Restore dependencies
      uses: actions/cache@v4
      with:
        path: node_modules
        key: deps-${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
    
    - name: Install dependencies (if cache miss)
      run: npm ci
    
    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::381492077721:role/Github_Actions_Role
        role-session-name: github-actions-plan
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk@latest
    
    - name: CDK Synth
      run: |
        echo "🔄 Synthesizing CDK stacks..."
        cdk synth --all --output cdk.out
    
    - name: CDK Diff
      id: diff
      run: |
        echo "📋 Checking for infrastructure changes..."
        {
          echo "## CDK Infrastructure Changes"
          echo ""
          echo "### Stack Differences:"
          echo "\`\`\`diff"
          cdk diff --all 2>&1 || echo "No changes detected or diff failed"
          echo "\`\`\`"
        } > cdk-diff.md
    
    - name: Comment PR with changes
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const diffContent = fs.readFileSync('cdk-diff.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: diffContent
          });
    
    - name: Upload CDK plan
      uses: actions/upload-artifact@v4
      with:
        name: cdk-plan-${{ github.run_id }}
        path: |
          cdk.out/
          cdk-diff.md
        retention-days: 7

  approval:
    name: "Manual Approval"
    runs-on: ubuntu-latest
    needs: [plan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: production  # Use GitHub Environments for better control

    permissions:
      issues: write
      contents: read

    steps:
    - name: Request Manual Approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ secrets.GITHUB_TOKEN }}
        approvers: ${{ vars.DEPLOYMENT_APPROVERS || 'Sayaji911' }}
        minimum-approvals: 1
        issue-title: "🚀 Production Deployment Approval Required"
        issue-body: |
          ## Deployment Request
          
          **Branch:** `${{ github.ref_name }}`
          **Commit:** `${{ github.sha }}`
          **Author:** `${{ github.actor }}`
          
          **Changes:** Please review the CDK diff in the plan job above.
          
          Please approve or deny this production deployment.
        exclude-workflow-initiator-as-approver: false
        fail-on-denial: true

  deploy:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    needs: [setup, approval]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: production
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Download source code
      uses: actions/download-artifact@v4
      with:
        name: source-code-${{ github.run_id }}
    
    - name: Download CDK plan
      uses: actions/download-artifact@v4
      with:
        name: cdk-plan-${{ github.run_id }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Restore dependencies
      uses: actions/cache@v4
      with:
        path: node_modules
        key: deps-${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
    
    - name: Install dependencies (if cache miss)
      run: npm ci
    
    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::381492077721:role/Github_Actions_Role
        role-session-name: github-actions
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk@latest
    
    - name: Verify AWS connection
      run: |
        echo "🔍 Verifying AWS connection..."
        aws sts get-caller-identity
        echo "✅ AWS connection verified"
    
    - name: Check CDK Bootstrap status
      run: |
        echo "🔍 Checking CDK bootstrap status..."
        if aws cloudformation describe-stacks --stack-name CDKToolkit --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "✅ CDK already bootstrapped"
        else
          echo "🚀 Bootstrapping CDK..."
          cdk bootstrap aws://${{ env.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} \
            --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess
        fi
    
    - name: CDK Deploy
      id: deploy
      run: |
        echo "🚀 Deploying CDK stacks..."
        cdk deploy --all \
          --require-approval never \
          --verbose \
          --outputs-file outputs.json \
          --progress events
        echo "✅ Deployment completed successfully!"
    
    - name: Upload deployment outputs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: deployment-outputs-${{ github.run_id }}
        path: outputs.json
        retention-days: 30
    
    - name: Post-deployment validation
      run: |
        echo "🔍 Running post-deployment validation..."
        # Add your specific validation commands here
        # Example: curl health checks, AWS CLI validations, etc.
        echo "✅ Post-deployment validation completed!"

  notify:
    name: "Notify & Cleanup"
    runs-on: ubuntu-latest
    needs: [setup, tests, plan,approval,deploy]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/master')
    
    steps:
    - name: Generate Deployment Report
      run: |
        echo "## 📋 Deployment Complete"
  